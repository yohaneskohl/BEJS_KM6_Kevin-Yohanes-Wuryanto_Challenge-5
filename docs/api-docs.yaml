openapi: 3.0.0
info:
  title: Bank account API
  description: Dokumentasi bankAccount-schema system API. API ini menyediakan endpoint-endpoint untuk manajemen user, accounts, dan transactions.
  version: 0.1.9
servers:
  - url: http://localhost:8000/v1
    description: Local development server
paths:
  /authentication/register:
    post:
      summary: Register a new authentication.
      description: Creates a new authentication with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentication-schema'
      responses:
        '201':
          description: authentication registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/authentication-schema'
        '400':
          description: email has already been used!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: email has already been used!
                  data:
                    example: ~
        '401':
          description: input must be required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: input must be required
                  data:
                    example: ~
        default:
          description: Internal server error.
      tags:
        - authentication
  /authentication/verify:
    post:
        summary: Get all user.
        description: Retrieves a list of all users.
        responses:
          '200':
            description: Authentication registered successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: boolean
                    message:
                      type: string
                    data:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: dewangga
                        email:
                          type: string
                          example: dewangga@gmail.com
                        token:
                          type: string
                          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsIm5hbWUiOiJkZXdhbmdnYSIsImVtYWlsIjoiZGV3YW5nZ2FAZ21haWwuY29tIiwiaWF0IjoxNzEzNzA1ODI5fQ.PbfvsifscthSpclalYNRwjRW73iq5eLz3uVTYbCDA2I

          '400':
            description: invalid email or password
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: boolean
                    message:
                      type: string
                      example: invalid email or password!
                    data:
                      example: ~
          default:
            description: Internal server error.
        tags:
          - authentication
  /authentication/whoami:
    get:
        summary: Get all Authentication.
        description: Retrieves a list of all Authentications.
        responses:
          '200':
            description: Authentication registered successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: boolean
                    message:
                      type: string
                    data:
                      $ref: '#/components/schemas/authentication-schema'
          '403':
            description: token not provided!
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: boolean
                      example: false
                    message:
                      type: string
                      example: token not provided!
                    data:
                      example: ~    
            
          '409':
            description: jwt malformed!
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: boolean
                      example: false
                    message:
                      type: string
                      example: jwt malformed!!
                    data:
                      example: ~    
          default:
            description: Internal server error.
        tags:
          - authentication
  /auth/register:
    post:
      summary: Register a new user.
      description: Creates a new user with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users-schema'
      responses:
        '200':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/users-schema'
        '400':
          description: Semua data harus diisi!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Semua data harus diisi!
                  data:
                    example: ~
        '404':
          description: Email sudah digunakan!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Email sudah digunakan!
                  data:
                    example: ~
        default:
          description: Internal server error.
      tags:
        - users
      security:
        - bearerAuth: []
    
    get:
      summary: Get all user.
      description: Retrieves a list of all users.
      responses:
        '200':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/users-schema'
        default:
          description: Internal server error.
      tags:
        - users
  /auth/register/{id}:
    get:
      summary: Get user by ID.
      description: Retrieves user details by the provided ID.
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users-schema'
        '404':
          description: User tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: User tidak ditemukan
                  data:
                    example: ~
        default:
          description: Internal server error.
      tags:
        - users
  /accounts:
    post:
      summary: Create a new bank account.
      description: Creates a new bank account for the specified user ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bankAccount-schema'
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bankAccount-schema'
        '400':
          description: All input fields are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: All input fields are required
                  data:
                    example: ~
        '401':
          description: Bank account number already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Bank account number already exists
                  data:
                    example: ~
        '404':
          description: User with id ${userId} not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: User with id ${userId} not found
                  data:
                    example: ~
        default:
          description: Internal server error.
      tags:
        - accounts
    get:
      summary: Get all bank accounts.
      description: Retrieves a list of all bank accounts.
      responses:
        '200':
          description: A list of bank accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/bankAccount-schema'
        default:
          description: IInternal server error.
      tags:
        - accounts
  /accounts/{id}:
    get:
      summary: Get bank account by ID.
      description: Retrieves bank account details by the provided ID.
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bankAccount-schema'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Account not found
                  data:
                    example: ~
        default:
          description: Internal server error.
      tags:
        - accounts
  /transaction:
    post:
      summary: Create a new transaction.
      description: Initiates a new transaction between two bank accounts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction-schema'
      responses:
        '200':
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction-schema'
        '400':
          description: Untuk pengirim atau penerima tidak valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Untuk pengirim atau penerima tidak valid
                  data:
                    example: ~
        '404':
          description: Untuk pengirim atau penerima tidak valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Untuk pengirim atau penerima tidak valid
                  data:
                    example: ~
        default:
          description: Internal server error.
      tags:
        - transactions
    get:
      summary: Get all transactions.
      description: Retrieves a list of all transactions.
      responses:
        '200':
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transaction-schema'
        default:
          description: Internal server error.
      tags:
        - transactions
  /transaction/{id}:
    get:
      summary: Get transaction by ID.
      description: Retrieves transaction details by the provided ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Transaction details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction-schema'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                    example: Transaction not found
                  data:
                    example: ~
        default:
          description: Internal server error.
      tags:
        - transactions
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    authentication-schema:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          name:
            type: string
            example: dewangga
          email:
            type: string
            example: dewangga@gmail.com
          password:
            type: string
            example: password123
          identity_type:
            type: string
            example: KTP
          identity_number:
            type: string
            example: "123123"
          address:
            type: string
            example: Surabaya agak ke kanan dikit
    users-schema:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Mikey
        email:
          type: string
          example: Mikey@gmail.com
        password:
          type: string
          example: password123
        identity_type:
          type: string
          example: KTP
        identity_number:
          type: string
          example: "123123"
        address:
          type: string
          example: Surabaya agak ke kanan dikit
    bankAccount-schema:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        bank_name:
          type: string
          example: 1
        bank_account_number:
          type: string
          example: 1
        balance:
          type: number
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
      example:
        id: 1
        bank_name: BRI
        bank_account_number: "0008"
        balance: 5000000
        userId: 8  
    transaction-schema:
      type: object
      properties:
        id:
          type: integer
          format: int64
        source_account_id:
          type: integer
          format: int64
        destination_account_id:
          type: integer
          format: int64
        amount:
          type: number
      example:
        id: 1
        source_account_id: 6
        destination_account_id: 8
        amount: 10000
